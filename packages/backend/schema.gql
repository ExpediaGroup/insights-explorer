# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Activity {
  activityType: ActivityType!
  details: ActivityDetails
  id: ID!
  insight: Insight
  isOwnActivity: Boolean!
  likeCount: Float!
  likedBy: UserConnection!
  occurredAt: String!
  user: User!
  viewerHasLiked: Boolean!
}

type ActivityActivityDetails {
  activity: Activity!
}

type ActivityConnection {
  edges: [ActivityEdge!]!
  internalRequest: JSON!
  pageInfo: PageInfo
  suggestedFilters: AutocompleteResults!
}

union ActivityDetails = ActivityActivityDetails | CommentActivityDetails | InsightActivityDetails | InsightCollaboratorActivityDetails | LoginActivityDetails | NewsActivityDetails | UserActivityDetails

type ActivityEdge {
  cursor: String!
  node: Activity!
  score: Float
}

enum ActivityType {
  ADD_COLLABORATOR
  CREATE_COMMENT
  CREATE_INSIGHT
  DELETE_COMMENT
  DELETE_INSIGHT
  EDIT_COMMENT
  EDIT_INSIGHT
  FOLLOW_USER
  LIKE_ACTIVITY
  LIKE_COMMENT
  LIKE_INSIGHT
  LIKE_NEWS
  LOGIN
  REMOVE_COLLABORATOR
  UNFOLLOW_USER
  UNLIKE_ACTIVITY
  UNLIKE_COMMENT
  UNLIKE_INSIGHT
  UNLIKE_NEWS
  UPDATE_PROFILE
  VIEW_INSIGHT
}

type AppSettings {
  authSettings: AuthSettings!
  chatSettings: ChatSettings
  externalBlogUrl: String
  externalDocUrl: String!
  externalVideosUrl: String
  gitHubSettings: GitHubSettings!
  iexScmUrl: String!
  version: String!
}

type AuthSettings {
  authorizeUrl: String!
  clientId: String!
  issuer: String
  pkceEnabled: Boolean!
  provider: String!
  scopes: String!
}

type AutocompleteResults {
  activityInsights: [UniqueValue!]
  activityUsers: [UniqueValue!]
  authors: [UniqueValue!]
  skills: [UniqueValue!]
  tags: [UniqueValue!]
  teams: [UniqueValue!]
}

type AvatarUploadResult {
  avatar: String!
  avatarUrl: String!
}

type ChatSettings {
  channel: String!
  provider: String!
  url: String!
}

type Comment {
  author: User!
  childComments: CommentConnection!
  commentText: String!
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  insight: Insight!
  isDeleted: Boolean!
  isEdited: Boolean!
  isOwnComment: Boolean!
  likeCount: Float!
  likedBy: UserConnection!
  updatedAt: DateTime!
  viewerHasLiked: Boolean!
}

type CommentActivityDetails {
  comment: Comment!
  insight: Insight
}

type CommentConnection {
  edges: [CommentEdge!]!
  pageInfo: PageInfo
}

type CommentEdge {
  cursor: String!
  node: Comment!
}

input CommentInput {
  commentText: String!
  insightId: ID
  parentCommentId: ID
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Draft {
  createdAt: DateTime!
  createdByUser: User
  draftData: JSON!
  draftId: Float!
  draftKey: String!
  insight: Insight
  updatedAt: DateTime!
}

input DraftInput {
  draftData: JSON!
  draftKey: String!
  insightId: ID
}

type GitHubSettings {
  defaultOrg: String!
  graphqlApiUrl: String!
  restApiUrl: String!
  url: String!
}

type Insight {
  authors: UserConnection!
  changeHistory: InsightChangeConnection!
  collaborators: UserPermissionConnection
  commentCount: Float!
  comments: CommentConnection
  config: InsightConfig
  createdAt: String!
  creation: InsightCreation
  description: String!
  files: [InsightFile!]
  forks: Float!
  fullName: String!
  id: ID!
  itemType: String!
  likeCount: Float!
  likedBy: UserConnection!
  links: [InsightLink!]
  metadata: InsightMetadata
  name: String!
  namespace: String!
  readme: InsightReadme
  repository: Repository!
  stars: Float!
  syncedAt: String!
  tags: [String!]!
  thumbnailUrl: String
  updatedAt: String!
  url: String!
  viewCount: Float!
  viewerCanEdit: Boolean!
  viewerHasLiked: Boolean!
  viewerPermission: String
}

type InsightActivityDetails {
  commitMessage: String
  insight: Insight
}

type InsightChange {
  abbreviatedOid: String!
  additions: Float!
  author: User!
  changedFiles: Float!
  committedDate: String!
  deletions: Float!
  message: String!
  oid: String!
}

type InsightChangeConnection {
  edges: [InsightChangeEdge!]!
  pageInfo: PageInfo
}

type InsightChangeEdge {
  cursor: String!
  node: InsightChange!
}

type InsightCollaboratorActivityDetails {
  insight: Insight
  permission: String!
  user: User!
}

type InsightConfig {
  authors: [String!]
  excludedAuthors: [String!]
}

type InsightConnection {
  edges: [InsightEdge!]!
  pageInfo: PageInfo
}

type InsightCreation {
  clonedFrom: String
  importedFrom: String
  template: String
}

input InsightCreationInput {
  clonedFrom: String
  importedFrom: String
  template: String
}

type InsightEdge {
  cursor: String
  node: Insight!
  score: Float
}

type InsightFile {
  contents: String
  conversions: [InsightFileConversion!]
  encoding: String
  hash: String
  id: String!
  mimeType: String!
  name: String!
  path: String!
  readonly: Boolean
  size: Float!
}

type InsightFileConversion {
  mimeType: String!
  path: String!
}

input InsightFileInput {
  action: String!
  contents: String
  id: String!
  mimeType: String
  name: String!
  originalPath: String
  path: String!
}

input InsightFileUploadInput {
  id: String!
  name: String
  path: String
  size: Float!
}

type InsightLink {
  group: String
  name: String
  url: String!
}

input InsightLinkInput {
  group: String
  name: String
  url: String!
}

type InsightMetadata {
  publishedDate: String
  team: String
}

input InsightMetadataInput {
  publishedDate: String
  team: String
}

type InsightReadingTime {
  minutes: Float!
  time: Float!
  words: Float!
}

type InsightReadme {
  contents: String
  path: String!
  readingTime: InsightReadingTime
}

input InsightSearch {
  paging: Paging
  query: String!
  sort: [Sort!]
}

type InsightSearchResults {
  internalRequest: JSON!
  pageInfo: PageInfo!
  results: [SearchResult!]!
  suggestedFilters: AutocompleteResults!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type LoginActivityDetails {
  isFirstLogin: Boolean!
  loginCount: Float!
}

type Mutation {
  addCollaborator(insightId: ID!, permission: String, userId: ID!): Insight!
  addComment(comment: CommentInput!): Comment!
  addNews(news: NewsInput!): News!
  cloneInsight(insightId: ID!): Draft!
  deleteComment(commentId: ID!): Comment!
  deleteDraft(draftKey: String!): Draft!
  deleteInsight(archiveRepo: Boolean!, insightId: ID!): ID!
  deleteNews(newsId: ID!): News!
  getAccessToken(code: String!): String!
  likeActivity(activityId: ID!, liked: Boolean!): Activity!
  likeComment(commentId: ID!, liked: Boolean!): Comment!
  likeInsight(insightId: ID!, liked: Boolean!): Insight!
  likeNews(liked: Boolean!, newsId: ID!): News!
  login: User!
  publishDraft(draftKey: String!): Insight!
  removeCollaborator(insightId: ID!, userId: ID!): Insight!
  syncAllInsights: Float!
  syncAllUsers: Float!
  syncInsight(insightId: ID!): Insight!
  updateComment(comment: CommentInput!, commentId: ID!): Comment!
  updateNews(news: NewsInput!, newsId: ID!): News!
  updateUser(user: UpdateUserInput!): User!
  uploadSingleFile(attachment: InsightFileUploadInput!, draftKey: String!, file: Upload!): InsightFile!
  uploadUserAvatar(file: Upload!, size: Float!): AvatarUploadResult!
  upsertDraft(draft: DraftInput!): Draft!
  viewInsight(insightId: ID!, insightName: String!): Activity!
}

"""New Insight"""
input NewInsight {
  description: String!
  name: String!
  org: String
  tags: [String!]
}

type News {
  activeAt: DateTime!
  author: User!
  body: String!
  createdAt: DateTime!
  deletedAt: DateTime!
  id: ID!
  isActive: Boolean!
  isDeleted: Boolean!
  likeCount: Float!
  likedBy: UserConnection!
  summary: String!
  updatedAt: DateTime!
  viewerHasLiked: Boolean!
}

type NewsActivityDetails {
  news: News!
}

type NewsConnection {
  edges: [NewsEdge!]!
  pageInfo: PageInfo
}

type NewsEdge {
  cursor: String!
  node: News!
}

input NewsInput {
  activeAt: DateTime!
  body: String!
  summary: String!
}

type PageInfo {
  endCursor: String
  from: Float
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  size: Float
  startCursor: String
  total: Float
}

input Paging {
  from: Float
  size: Float!
}

type Query {
  activeNews(after: String, first: Float): NewsConnection!
  activities(after: String, first: Float, search: String, sort: [Sort!]): ActivityConnection!
  activity(activityId: ID!): Activity!

  """Retrieve all drafts for a user."""
  allDraftsForUser(userId: String!): [Draft!]!
  appSettings: AppSettings!
  autocomplete: AutocompleteResults!
  comment(commentId: ID!): Comment!
  comments(insightId: ID!): CommentConnection!
  currentUser: User!
  draftByKey(draftKey: String!): Draft!
  draftsForUser(insightId: ID, userId: String!): [Draft!]!
  insight(fullName: String, insightId: ID): Insight
  insightByFullName(fullName: String!): Insight
  insights(search: InsightSearch): InsightSearchResults!
  news(active: Boolean, after: String, first: Float): NewsConnection!
  newsById(newsId: ID!): News!
  template(fullName: String, templateId: ID): Insight
  templates: [Insight!]!
  user(userName: String!): User
  users: [User!]!
  validateInsightName(name: String!, namespace: String!): ValidateInsightName!
}

type Repository {
  cloneUrl: String!
  defaultBranch: String!
  externalFullName: String!
  externalId: String!
  externalName: String!
  isArchived: Boolean!
  isMissing: Boolean!
  isReadOnly: Boolean!
  owner: RepositoryPerson!
  type: String!
  url: String!
}

type RepositoryPerson {
  avatarUrl: String
  email: String
  externalId: String!
  ldapDn: String
  login: String!
  permission: String
  type: String!
}

type SearchResult {
  insight: Insight!
  score: Float
}

input Sort {
  direction: String
  field: String
}

type UniqueValue {
  occurrences: Float!
  value: String!
}

"""Updated User"""
input UpdateUserInput {
  avatar: String
  bio: String
  chatHandle: String
  currentStatus: String
  defaultTemplateId: String
  featureFlags: JSON
  githubPersonalAccessToken: String
  locale: String
  location: String
  readme: String
  skills: [String!]
  team: String
  title: String
  userName: String
}

"""Updated Insight"""
input UpdatedInsight {
  creation: InsightCreationInput
  description: String
  files: [InsightFileInput!]
  itemType: String!
  links: [InsightLinkInput!]
  metadata: InsightMetadataInput
  name: String
  namespace: String
  readme: UpdatedReadme
  tags: [String!]
}

input UpdatedReadme {
  contents: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  authoredInsights(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float

    """Sort columns"""
    sort: [Sort!]
  ): InsightConnection
  avatarUrl: String
  bio: String
  chatHandle: String
  commentCount: Float!
  createdAt: DateTime!
  currentStatus: String
  defaultTemplateId: ID
  deletedAt: DateTime!
  displayName: String!
  email: String!
  featureFlags: JSON
  githubPersonalAccessToken: String
  githubProfile: UserGitHubProfile
  healthCheck: UserHealthCheck!
  id: ID!
  isAdmin: Boolean
  isSelf: Boolean!
  lastLoginAt: DateTime!
  likedInsights(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float

    """Sort columns"""
    sort: [Sort!]
  ): InsightConnection
  locale: String
  location: String
  loginCount: Float!
  readme: String
  skills: [String!]!
  team: String
  title: String
  updatedAt: DateTime!
  userComments(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float

    """Sort columns"""
    sort: [Sort!]
  ): CommentConnection
  userName: String!
}

type UserActivityDetails {
  user: User!
}

type UserConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo
}

type UserEdge {
  cursor: String!
  node: User!
}

type UserGitHubProfile {
  avatarUrl: String!
  bio: String!
  location: String!
  login: String!
  status: UserGitHubStatus
  url: String!
}

type UserGitHubStatus {
  emoji: String
  message: String!
}

type UserHealthCheck {
  doesGitHubEmailMatch: Boolean
  hasGitHubEmail: Boolean
  hasGitHubToken: Boolean!
  hasRequiredScopes: Boolean
  isDefaultOrgMember: Boolean
  isGitHubTokenValid: Boolean
}

type UserPermissionConnection {
  edges: [UserPermissionEdge!]!
  pageInfo: PageInfo
}

type UserPermissionEdge {
  cursor: String!
  node: User!
  permission: String!
}

type ValidateInsightName {
  existingInsight: Insight
  isFullNameUnique: Boolean!
  isNameUnique: Boolean!
}
